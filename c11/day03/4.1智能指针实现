class PointCounter {
 private:
  friend class SmartPointer;

  Point p_;
  size_t count_;

  PointCounter() : count_{1} {}                         // 1.
  PointCounter(const Point& p) : p_{p}, count_{1} {}    // 2.
  PointCounter(Point&& p) : p_{p}, count_{1} {}         // 3.
  PointCounter(int x, int y) : p_{x, y}, count_{1} {}   // 4.
};

class SmartPointer {
 public:
  SmartPointer(Point* pp) : ptctr_{new PointCounter(*pp)} {}            // 1.
  SmartPointer(const Point& p) : ptctr_{new PointCounter(p)} {}
  SmartPointer(Point&& p) : ptctr_{new PointCounter(p)} {}
  SmartPointer(int x, int y) : ptctr_{new PointCounter(x, y)} {}

 private:
  void try_decrease() {
    if (nullptr != ptctr_) {
      if (1 == ptctr_->count_) {
        delete ptctr_;
      } else {
        --(ptctr_->count_);
      }
    } else {}
  }

 public:
  SmartPointer() : ptctr_{new PointCounter} {}                          // 2.
  SmartPointer(const SmartPointer& other) : ptctr_{other.ptctr_} {      // 3. 拷贝构造实现 引用计数++
    ++(ptctr_->count_);
  }
  SmartPointer(SmartPointer&& other) noexcept : ptctr_{other.ptctr_} {
    other.ptctr_ = nullptr;
  }
  SmartPointer& operator=(const SmartPointer& other) {                  // 4. 赋值构造实现 左- 新+
    try_decrease();
    ptctr_ = other.ptctr_;
    ++(ptctr_->count_);
    return *this;
  }
  SmartPointer& operator=(SmartPointer&& other) noexcept {
    try_decrease();
    ptctr_ = other.ptctr_;
    other.ptctr_ = nullptr;
    return *this;
  }
  ~SmartPointer() {
    try_decrease();
    ptctr_ = nullptr;
  }

 public:
  Point* operator->() const noexcept {                                  // 5.
    return &(ptctr_->p_);
  }
  Point& operator*() const noexcept {
    return ptctr_->p_;
  }

 private:
  PointCounter* ptctr_ = nullptr;
};

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

class RefCount {
 private:
  size_t* count_ = nullptr;

 private:
  void try_decrease() {
    if (nullptr != count_) {
      if (1 == *count_) {
        delete count_;
      } else {
        --(*count_);
      }
    } else {}
  }

 public:
  RefCount() : count_{new size_t(1)} {}
  RefCount(const RefCount& other) : count_{other.count_} { ++(*count_); } // 拷贝构造 "浅拷贝"
  RefCount(RefCount&& other) : count_{other.count_} { other.count_ = nullptr; }
  RefCount& operator=(const RefCount& other) {  // 赋值构造 左-新+
    try_decrease();
    count_ = other.count_;
    ++(*count_);
    return *this;
  }
  RefCount& operator=(RefCount&& other) {
    try_decrease();
    count_ = other.count_;
    other.count_ = nullptr;
    return *this;
  }
  ~RefCount() {
    try_decrease();
    count_ = nullptr;
  }
  
   bool only() const { return (1 == *count_); } // 是否是最后一个

  // ...
};


class SmartPointer {
 public:
  SmartPointer(Point* pp) : point_{pp} {}                   // 1.
  SmartPointer(const Point& p) : point_{new Point(p)} {}
  SmartPointer(Point&& p) : point_{new Point{p}} {}
  SmartPointer(int x, int y) : point_{new Point{x, y}} {}

 public:
  SmartPointer() : point_{new Point} {}
  SmartPointer(const SmartPointer& other) = default;        // 2. 里面调count的拷贝构造
  SmartPointer(SmartPointer&& other) noexcept : point_{other.point_}, refc_{std::move(other.refc_)} {
    other.point_ = nullptr;
  }
  SmartPointer& operator=(const SmartPointer& other) {      // 3.
    if (refc_.only()) {
      delete point_;
    }
    refc_  = other.refc_;  // count发生赋值拷贝 左-新+
    point_ = other.point_;
    return *this;
  }
  SmartPointer& operator=(SmartPointer&& other) noexcept {
    if (refc_.only()) {
      delete point_;
    }
    refc_  = std::move(other.refc_);
    point_ = other.point_;
    other.point_ = nullptr;
    return *this;
  }
  ~SmartPointer() {                                         // 4.
    if (point_ and refc_.only()) {
      delete point_;
      point_ = nullptr;
    }
  }

 public:
  Point* operator->() const noexcept {
    return point_;
  }
  Point& operator*() const noexcept {
    return *point_;
  }

 private:
  Point* point_ = nullptr;
  RefCount refc_;
};

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

template<typename T>
class smart_ptr {
 public:
  using value_type = T;

 public:
  smart_ptr(value_type* pp) : value_{pp} {}
  smart_ptr(const value_type& p) : value_{new value_type(p)} {}
  smart_ptr(value_type&& p) : value_{new value_type{p}} {}

 public:
  smart_ptr() : value_{new value_type} {}
  smart_ptr(const smart_ptr& other) = default;
  smart_ptr(smart_ptr&& other) = default;
  smart_ptr& operator=(const smart_ptr& other) {
    if (refc_.only()) {
      delete value_;
    }
    refc_  = other.refc_;
    value_ = other.value_;
    return *this;
  }
  smart_ptr& operator=(smart_ptr&& other) noexcept {
    if (refc_.only()) {
      delete value_;
    }
    refc_  = std::move(other.refc_);
    value_ = other.value_;
    other.value_ = nullptr;
    return *this;
  }
  ~smart_ptr() {
    if (value_ and refc_.only()) {
      delete value_;
      value_ = nullptr;
    }
  }

 public:
  value_type* operator->() const noexcept {
    return value_;
  }
  value_type& operator*() const noexcept {
    return *value_;
  }

 private:
  value_type* value_ = nullptr;
  RefCount refc_;
};

template<typename T, typename... Args>                     // 1.
smart_ptr<T> make_smart(Args&&... args) {                  // 2.
  return smart_ptr<T>(new T(std::forward<Args>(args)...)); // 3.
}

Refer: https://zhuanlan.zhihu.com/p/32925244

