//可变参数模板类 
//《3.0可变模板参数》是可变参数模板函数 这里是可变参数模板类  可变参数模板类的展开与函数不同 类需要通过递归+模板特化 或 继承+模板特化的方式展开 
//而非模板函数的简单递归 可变参数模板类一般需要3个类才能展开

eg: 常用的tuple是一个很明显的可变参数模板类 即可容纳不同类型 变长的类型集合
template<class... Types>
class tuple;
然后
std::tuple<int> p1 = std::make_tuple(1);
std::tuple<int, double> p2 = std::make_tuple(1, 3.14);
std::tuple<int, double, string> p3 = std::make_tuple(1, 3.14, "");

可变参数模板类一般需要3个类
eg:
template<typename... Args> struct sum; //前向声明 即声明sum是一个可变参数模板类

template<typename First, typename... Rest> //类的定义 
struct sum<First, Rest...> {
	enum { value = sum<First>::value + sum<Rest...>::value }; //仅仅是定义了部分展开的递归表达式
};

template<typename Last> //特化的递归终止类
struct sum<Last> {
	enum { value = sizeof(Last) };
}

这个sum类即实现了计算参数中的size总和 通过sum<int, char, short>::value即可获取总长度7


下面介绍一种以继承和特化的方式展开 而非上述的通过模板递归和模板特化的方式展开
eg:
template<int...> struct IndexSeq{}; //整形序列定义

template<int N, int... IndexSeq> //继承方式展开数据包
struct MakeIndexes : MakeIndexes<N - 1, N - 1, Indexes...> {};

tmeplate<int... Indexes> //模板特化 终止展开包的条件
struct MakeIndexes<0, Indexes...> {
	typedef IndexSeq<Indexes...> type;
};

int main() {
	using T = MakeIndexes<3>::type;
	cout<<typeid(T).name()<<endl;
	return 0;
}
