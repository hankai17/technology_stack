Widget w; w = w;
a[i] = a[j]; 存在潜在的赋值行为
举个栗子
class Bitmap {};
class Widget {
    private:
	Bitmap* pd;
};
Widget& Widget::operator=(const Widget& rhs)
{
	delete pb;
	pb = new Bitmap(*rhs.pb);
	return *this;
}
如果rhs与*this是同一个对象那就麻烦了 
so 加行证同测试identity test
if(this == &rhs) return *this; 即可
但是这样做有了自我赋值安全性 但是没有异常安全性:new的时候发生异常 返回出一块坏的内存
无法删除也无法读取
解决方法
Widget& Widget::operator=(const Widget& rhs)
{
	Bitmap* pOrig = pb;
	pb = new Bitmap(*rhs.pb);
	delete pOrig;
	return *this;
}这样即使new发生异常 没有看懂
加入一个流控分支 会降低执行速度 建议上面这种



