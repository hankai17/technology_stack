class Window
{
	public: 
	    std::string name() const;
	    virtual void display() const;
};
class WindowWithScrollBars: public Window
{
	public:
	    virtual void display() const;
};
void printNameAndDisplay(Window w) //不正确参数可能被切割
{
	std::cout<<w.name();
	w.display();
}
WindowWithScrollBars wwsb;
printNameAndDisplay(wwsb); //wwsb被构造成一个Window对象 值传递so调用的是Window::display()
解决切割问题的方法就是by reference-to-const方式传递w
void printNameAndDisplay(const Window& w) //引用传递 来什么是什么 本质是指针
{
	std::cout<<w.name();
	w.display();
}
尽量以pass-by-ref-to-const替换pass-by-value 高效且避免切割问题
以上规则不适用内置类型以及stl迭代器和函数对象

