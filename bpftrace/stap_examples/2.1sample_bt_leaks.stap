#!/usr/bin/env stap

global ptr2bt
global ptr2size
global bt_stats
global quit
global free_misses

probe begin
{
    warn(sprintf("Start tracing %d (/usr/local/nginx/sbin/nginx)...", target()))
    warn("Wait for 40 sec to complete.\n")
}

probe process("/usr/lib64/libc-2.28.so").function("malloc").return,
      process("/usr/lib64/libc-2.28.so").function("calloc").return,
      process("/usr/lib64/libc-2.28.so").function("realloc").return
{
    if (pid() == target()) {
        printf("Hit %s\n", probefunc())
        if (quit) {
            if (free_misses) {
                warn(sprintf("free misses: %d", free_misses))
            }

            foreach (bt in bt_stats) {
                print_ustack(bt)
                printf("\t%d\n", @sum(bt_stats[bt]))
            }

            exit()

        } else {
            if (@defined($oldmem)) {
                printf("free %p in realloc\n", $oldmem)
                ptr = $oldmem

                bt = ptr2bt[ptr]
                delete ptr2bt[ptr]

                bytes = ptr2size[ptr]
                delete ptr2size[ptr]

                bt_stats[bt] <<< -bytes
                if (@sum(bt_stats[bt]) == 0) {
                    delete bt_stats[bt]
                }
            }

            ptr = returnval()
            if (ptr) {
                // here we use a hack specific to glibc's implementation
                // to get the size of the memory block because we
                // may not get the value of the $bytes parameter reliably.
                
                p = ptr - &@cast(0, "size_t")[1]
                //printf("&@cast(0, 'size_t'): %d\n", &@cast(0, "size_t"));       // 0
                //printf("&@cast(0, 'size_t')[0]: %d\n", &@cast(0, "size_t")[0]); // 0
                //printf("&@cast(0, 'size_t')[1]: %d\n", &@cast(0, "size_t")[1]); // 8
                //printf("&@cast(0, 'size_t')[2]: %d\n", &@cast(0, "size_t")[2]); // 16
                //printf("&@cast(0, 'size_t')[3]: %d\n", &@cast(0, "size_t")[3]); // 24
                printf("p: %p\n", p)
                //printf("@cast(0, 'size_t')[0]: %d\n", @cast(0, "size_t")[0]);   // 0
                //printf("@cast(0, 'size_t')[1]: %d\n", @cast(0, "size_t")[1]);   // 0
                //printf("@cast(0, 'size_t')[2]: %d\n", @cast(0, "size_t")[2]);   // 0

                //printf("&@cast(p, 'size_t')[0]: %d\n", &@cast(p, "size_t")[0])  // 00100100110010100010 1001 1000
                //printf("&@cast(p, 'size_t')[1]: %d\n", &@cast(p, "size_t")[1])  // 00100100110010100010 1010 0000
                //printf("&@cast(p, 'size_t')[2]: %d\n", &@cast(p, "size_t")[2])  // 00100100110010100010 1010 1000
                //printf("&@cast(p, 'size_t')[3]: %d\n", &@cast(p, "size_t")[3])  // 00100100110010100010 1011 0000

                size = @cast(p, "size_t")[0] & ~(&@cast(0, "size_t")[1] - 1)
                //size = @cast(p, "size_t")[0] & (1...1000)
                //printf("@cast(p, 'size_t')[0]: %d\n", @cast(p, "size_t")[0]);   //         00100001
                //printf("@cast(p, 'size_t')[1]: %d\n", @cast(p, "size_t")[1]);   // 0010010011001010
                //printf("@cast(p, 'size_t')[2]: %d\n", @cast(p, "size_t")[2]);
                //printf("@cast(p, 'size_t')[3]: %d\n", @cast(p, "size_t")[3]);

                printf("alloc: %p (bytes %d)\n", ptr, size)
                bt = ubacktrace()
                ptr2bt[ptr] = bt
                ptr2size[ptr] = size
                bt_stats[bt] <<< size

            } else {
                warn("NULL returned")
            }
        }
    }
}

probe process("/usr/lib64/libc-2.28.so").function("free")
{
    ptr = pointer_arg(1)
    if (pid() == target() && ptr) {
        printf("free: %p\n", ptr)

        bt = ptr2bt[ptr]
        delete ptr2bt[ptr]

        bytes = ptr2size[ptr]
        delete ptr2size[ptr]

        if (bt == "" && bytes == 0) {
            free_misses++

        } else {
            bt_stats[bt] <<< -bytes
            if (@sum(bt_stats[bt]) == 0) {
                delete bt_stats[bt]
            }
        }
    }
}

probe timer.s(40)
{
    quit = 1
    delete ptr2bt
    delete ptr2size
}

/*
  chunk-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |             Size of previous chunk, if unallocated (P clear)  |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |             Size of chunk, in bytes                     |A|M|P|
      mem-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |             User data starts here...                          .
            .                                                               .
            .             (malloc_usable_size() bytes)                      .
            .                                                               |
nextchunk-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
*/

#stap --skip-badvars -DMAXACTION=100000 -DMAXMAPENTRIES=5000 -DMAXBACKTRACE=200 -x 3407 -d /usr/local/nginx/sbin/nginx -d /usr/lib64/ld-2.28.so -d /usr/lib64/libblkid.so.1.1.0 -d /usr/lib64/libc-2.28.so -d /usr/lib64/libcap.so.2.48 -d /usr/lib64/libcrypt.so.1.1.0 -d /usr/lib64/libdl-2.28.so -d /usr/lib64/libgcc_s-8-20210514.so.1 -d /usr/lib64/libmount.so.1.1.0 -d /usr/lib64/libnss_files-2.28.so -d /usr/lib64/libnss_sss.so.2 -d /usr/lib64/libnss_systemd.so.2 -d /usr/lib64/libpcre.so.1.2.10 -d /usr/lib64/libpcre2-8.so.0.7.1 -d /usr/lib64/libpthread-2.28.so -d /usr/lib64/librt-2.28.so -d /usr/lib64/libselinux.so.1 -d /usr/lib64/libuuid.so.1.3.0 -d /usr/lib64/libz.so.1.2.11 -I stapxx-AlPkYyQE -

#    01010001
#111001000101
