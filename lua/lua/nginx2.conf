user  nobody;
worker_processes  8;

#error_log  logs/error.log error;
error_log  logs/error.log debug;
#pid        logs/nginx.pid;

events {
    worker_connections  4096;
}

http {
    include       mime.types;
    default_type  application/octet-stream;
    lua_package_path "/usr/local/nginx/conf/?.lua;;";

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #log_format access '[$time_local] $request_time $remote_addr $status $bytes_sent $request $host DIRECT/$upstream_addr $upstream_http_content_type "$http_referer" "$http_user_agent"';
    log_format cache-ats-access '$msec $request_time $status [$time_local] $remote_addr "$req_host $req_real_host $request_method $uri$is_args$args $server_protocol" $bytes_sent $http_referer "$http_user_a    gent" $upstream_http_content_type "$upstream_addr"';
    
    log_format main_json '{"client_ip":"$remote_addr",'
			'"time_local":"$time_iso8601",'
			'"domain":"$host",'
			'"remote_user":"$remote_user",'
			'"request":"$request",'
			'"status":"$status",'
			'"body_bytes_sent":"$body_bytes_sent",'
			'"http_referer":"$http_referer",'
			'"http_user_agent":"$http_user_agent",'
			'"http_x_forwarded_for":"$http_x_forwarded_for"}';

    log_format main1_json '{"client_ip":"$remote_addr",'
			'"time_local":"$time_iso8601",'
			'"domain":"$req_host",'
			'"remote_user":"$remote_user",'
			'"request":"$request",'
			'"status":"$status",'
			'"body_bytes_sent":"$body_bytes_sent",'
			'"http_referer":"$http_referer",'
			'"http_user_agent":"$http_user_agent",'
			'"http_x_forwarded_for":"$http_x_forwarded_for"}';

    #access_log  logs/access.log  main;
    access_log  logs/access.log  main_json;

	resolver 159.226.59.158 ipv6=off;
	resolver_timeout 15s;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    server {
        #listen       80;
	listen [::]:80 ipv6only=off;
        server_name  localhost;

        #charset koi8-r;
        access_log  logs/host.access.log  cache-ats-access;
        #access_log  logs/access.log  main_json;

        proxy_intercept_errors on;
        recursive_error_pages on;

        set $ori_host $host;
  	set $req_host $host;       # it may has port eg: www.baidu.com:443
	set $req_real_host $host;  # it same as $req_host without port eg: www.baidu.com
        set $req_proto $scheme;
        set $proxy_v "1.0";

	location @error_page_302 {
	    proxy_http_version 1.0;
            proxy_set_header  Connection "";
            proxy_connect_timeout 60s;
            proxy_read_timeout 200s;
	    proxy_set_header Accept-Encoding '';

            set $n_url $upstream_http_location;
            if ( $upstream_http_location ~ (http.?)://([^/\?]+)(.*)$ ) {
                set $n_proto $1;
                set $n_host  $2;
                set $n_url   $3;
            }
	    proxy_pass 		   $n_proto://$n_host$n_url;
            proxy_set_header       Host          $n_host;
	    body_filter_by_lua_file conf/body_rewrite.lua;
        
            #proxy_set_header Content-Length '';
            header_filter_by_lua_block {
                ngx.header["content-length"] = nil
            }

            proxy_intercept_errors on;
            recursive_error_pages on;
            error_page 302  = @error_page_302;
        }

        location / {
                rewrite_by_lua_file conf/request_rewrite.lua;
		proxy_pass $req_proto://$req_host$request_uri;
		
		proxy_set_header Accept-Encoding '';
                header_filter_by_lua_block {
                    ngx.header["content-length"] = nil
                }

                #add_header Access-Control-Allow-Origin *;
	        proxy_buffers 256 4k;
	        proxy_max_temp_file_size 0;
	        proxy_connect_timeout 30;
	    	body_filter_by_lua_file conf/body_rewrite.lua;

#################################################################################
	#subs_filter_types text/html;
        #subs_filter http://$host/ / gi;
	#subs_filter http://$host / gi;
	#subs_filter http://((?!www.ifeng.com))/ http://$1.http.80.host/ gr;
	#subs_filter http://([^/]*)/ http://$1.http.80.www.net-east.com/ gr;
	#subs_filter https://([^/]*)/ http://$1.http.443.www.net-east.com/ gr;
	#subs_filter http:// http://pr.net-east.com/ gr;
####################################################################################

                error_page 302 = @error_page_302;
                error_page 301 = @error_page_302;
        }

        #error_page  404              /404.html;
        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }

    server {
	listen [::]:80; #ipv6only=off;
        server_name  lib.ioa.ac.cn.http.80.pr.net-east.com;
        #server_name  lib.ioa.ac.cn.http.80.pr.net-east;

        access_log  logs/host.access.log  cache-ats-access;
        #access_log  logs/access.log  main_json;

        #proxy_intercept_errors on;
        #recursive_error_pages on;

        set $ori_host $host;
  	set $req_host $host;       # it may has port eg: www.baidu.com:443
	set $req_real_host $host;  # it same as $req_host without port eg: www.baidu.com
        set $req_proto $scheme;
        set $proxy_v "1.0";


        location / {
                rewrite_by_lua_file conf/request_rewrite.lua;
		proxy_pass $req_proto://$req_host$request_uri;
		
		proxy_set_header Accept-Encoding '';
                #header_filter_by_lua_block {
                #    ngx.header["content-length"] = nil
                #}

                if ( $upstream_http_location ~ (http.?)://([^/\?]+)(.*)$ ) {
                    set $n_proto $1;
                    set $n_host  $2;
                    set $n_url   $3;
                }

                header_filter_by_lua '
                    local resp_status = ngx.status
                    local ori_location = ngx.header["Location"]
                    if resp_status == 301 or resp_status == 302 then
                        local port = "80"
                        local n_proto, n_host, n_url = string.match(ori_location, "(http.?)://([^/%?]+)(.*)$")
                        ngx.log(ngx.ERR, ">>+++ is 302 ", n_proto, n_host, n_url)
                        if n_proto ~= nil and n_host ~= nil then
                            if n_proto == "https" then
                               port = "443"
                            end
                            local new_location = string.format("http://%s.%s.%s.pr.net-east.com%s", n_host, n_proto, port, n_url)
                            ngx.header["Location"] = new_location
                        end

                    end
                ';

                #add_header Access-Control-Allow-Origin *;
	        proxy_buffers 256 4k;
	        proxy_max_temp_file_size 0;
	        proxy_connect_timeout 30;

	    	body_filter_by_lua_file conf/body_rewrite.lua;

                #error_page 302 = @error_page_302;
                #error_page 301 = @error_page_302;
        }

        #error_page  404              /404.html;
        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }

    server {
	listen [::]:80; #ipv6only=off;      #listen       80;
        server_name  www.topway-ad.com.http.80.pr.net-east.com;

        access_log  logs/host.access.log  cache-ats-access;
        #access_log  logs/access.log  main_json;

        proxy_intercept_errors on;
        recursive_error_pages on;

  	set $req_host $host;       # it may has port eg: www.baidu.com:443
	set $req_real_host $host;  # it same as $req_host without port eg: www.baidu.com
        set $req_proto $scheme;

	location @error_page_302 {
	    proxy_http_version 1.0;
            proxy_set_header  Connection "";
            proxy_connect_timeout 60s;
            proxy_read_timeout 200s;
	    proxy_set_header Accept-Encoding '';

            set $n_url $upstream_http_location;
            if ( $upstream_http_location ~ (http.?)://([^/\?]+)(.*)$ ) {
                set $n_proto $1;
                set $n_host  $2;
                set $n_url   $3;
            }
	    proxy_pass 		   $n_proto://$n_host$n_url;
            proxy_set_header       Host          $n_host;
	    body_filter_by_lua_file conf/body_rewrite.lua;
            proxy_set_header Content-Length '';

            proxy_intercept_errors on;
            recursive_error_pages on;
            error_page 302  = @error_page_302;
        }


        location / {
	    	proxy_http_version 1.1;
                rewrite_by_lua_file conf/request_rewrite.lua;
		proxy_pass $req_proto://$req_host$request_uri;
		
		proxy_set_header Accept-Encoding '';
                proxy_set_header  Connection "";
                header_filter_by_lua_block {
                    ngx.header["content-length"] = nil
                }

	        proxy_buffers 256 4k;
	        proxy_max_temp_file_size 0;
	        proxy_connect_timeout 30;
	    	body_filter_by_lua_file conf/body_rewrite.lua;

                error_page 302 = @error_page_302;
                error_page 301 = @error_page_302;
        }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }

	
#   server{
#	        #listen 443 default ssl;
#	        #ssl on;
#        	#access_log  logs/host.access.log  cache-ats-access;
#
#  		set $req_host $host;       # it may has port eg: www.baidu.com:443
#		set $req_real_host $host;  # it same as $req_host without port eg: www.baidu.com
#        	set $req_proto $scheme;
#
#	        ssl_certificate server.crt;
#	        ssl_certificate_key server.key;
#	        server_name pr.net-east.com; 
#
#	        location / {
#                	rewrite_by_lua_file conf/request_rewrite.lua;
#			#proxy_pass $scheme://$host$request_uri;
#			proxy_pass $req_proto://$req_host$request_uri;
#			
#			#proxy_set_header Host $req_real_host;
#			proxy_set_header Accept-Encoding '';
#
#	        	proxy_buffers 256 4k;
#	        	proxy_max_temp_file_size 0;
#	        	proxy_connect_timeout 30;
#	    		body_filter_by_lua_file conf/body_rewrite.lua;
#	        }       
#
#	}

}

#############################################################################################
#
# proxy for https
#
#############################################################################################
stream { 
       log_format https_proxy '$msec $upstream_connect_time $status [$time_local] $remote_addr '
                        '$protocol $ssl_preread_server_name $bytes_sent $bytes_received '
                        '$session_time "$upstream_addr" '
                        '"$upstream_bytes_sent" "$upstream_bytes_received"';

	log_format https_proxy_json '{"client_ip":"$remote_addr",'
			'"time_local":"$time_iso8601",'
			'"domain":"$ssl_preread_server_name",'
			'"msec":"$msec",'
			'"upstream_connect_time":"$upstream_connect_time",'
			'"status":"$status",'
			'"protocol":"$protocol",'
			'"ssl_preread_server_name":"$ssl_preread_server_name",'
			'"bytes_sent":"$bytes_sent",'
			'"bytes_received":"$bytes_received",'
			'"session_time":"$session_time",'
			'"upstream_addr":"$upstream_addr",'
			'"upstream_bytes_sent":"$upstream_bytes_sent",'
			'"upstream_bytes_received":"$upstream_bytes_received"}';

	resolver 159.226.59.158 ipv6=off;
	resolver_timeout 5s;

	#server { 
	#	 listen 444; 
	#	 ssl_preread on; 
	#	 proxy_connect_timeout 5s; 
	#	 proxy_pass $ssl_preread_server_name:$server_port; 
	# } 


	 server {
		#listen 443;
		#listen [::]:443 ipv6only=off;
		listen [::]:443 ipv6only=on;
                ssl_preread on;

          #deny 10.10.110.42;
                #access_log logs/access-httpsproxy.log https_proxy;
                access_log logs/access-httpsproxy.log https_proxy_json;

                proxy_connect_timeout 20s;
                proxy_timeout 20s;

                proxy_pass $ssl_preread_server_name:$server_port;
        }
} 



